<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Decoupled Microservices on Wild Rydes Asynchronous Messaging Workshop</title><link>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/</link><description>Recent content in Decoupled Microservices on Wild Rydes Asynchronous Messaging Workshop</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Mon, 09 Sep 2019 17:42:10 +0100</lastBuildDate><atom:link href="https://marcinbelczewski.github.io/asynchronous-messaging-workshop/index.xml" rel="self" type="application/rss+xml"/><item><title>Configure AWS Cloud9</title><link>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/prerequisites/prerequisites-2/prerequisites-2.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/prerequisites/prerequisites-2/prerequisites-2.html</guid><description>Ad blockers, javascript disabler, and tracking blockers should be disabled for the cloud9 domain, or connecting to the workspace might be impacted. Cloud9 requires third-party-cookies. You can whitelist the specific domains.
1. Configure your AWS Cloud9 development environment In your AWS Cloud9 IDE (find yours by your initials prefix), you can close the welcome tab. Run the following command in the bash tab (at the bottom of the IDE):</description></item><item><title>Bootstrap the Initial State</title><link>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/bootstrap-initial-state/bootstrap-initial-state.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/bootstrap-initial-state/bootstrap-initial-state.html</guid><description>First, we will setup the initial state, including the integrating of the Unicorn Management Service (leveraging Amazon API Gateway and AWS Lambda), the Rides Store (leveraging Amazon DynamoDB) and all 3 backend services (leveraging AWS Lambda).
1. Browse to your AWS Cloud9 IDE Browse to your AWS Cloud9 Console and select the environment called %INITIALS%-wildrydes-webapp-development.
Detailed description 2. Build the lab artifacts from source We provide you with an AWS SAM template which we will use to bootstrap the initial state.</description></item><item><title>Create the Amazon SNS topic</title><link>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-sns-topic/create-sns-topic.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-sns-topic/create-sns-topic.html</guid><description>In this step, you can chose whether you want to create the Amazon SNS topic via the AWS console or AWS SAM. Just select the corresponding tab below and follow the instructions:
You can chose, whether you would like to use the AWS Console or AWS SAM for this lab. Once you have chosen, stick to it until the end of this lab and don&amp;rsquo;t switch in between!
Console SAM 1.</description></item><item><title>Create Customer Notification Service Subscription</title><link>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-customer-notification-service-subscription/create-customer-notification-service-subscription.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-customer-notification-service-subscription/create-customer-notification-service-subscription.html</guid><description>In this step, we will create an Amazon SQS queue for the Customer Notification Service and add a subscription to the Amazon SNS topic we created before:
Console SAM 1. Create a new Amazon SQS queue In your Amazon SQS console, select Create New Queue in top left corner or click Get Started Now in the center of the page, if it&amp;rsquo;s your first queue in this region.</description></item><item><title>Create Customer Accounting Service Subscription</title><link>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-customer-accounting-service-subscription/create-customer-accounting-service-subscription.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-customer-accounting-service-subscription/create-customer-accounting-service-subscription.html</guid><description>In this step, we will create an Amazon SQS queue for the Customer Accounting Service and add a subscription to the Amazon SNS topic we created before:
Console SAM 1. Create a new Amazon SQS queue In your Amazon SQS console, select Create New Queue in top left corner or click Get Started Now in the center of the page, if it&amp;rsquo;s your first queue in this region.</description></item><item><title>Create Extraordinary Rides Service Subscription</title><link>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-extraordinary-rides-service-subscription/create-extraordinary-rides-service-subscription.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-extraordinary-rides-service-subscription/create-extraordinary-rides-service-subscription.html</guid><description>In this step, we will create an Amazon SQS queue for the Extraordinary Rides Service and add a subscription to the Amazon SNS topic we created before:
Console SAM 1. Create a new Amazon SQS queue In your Amazon SQS console, select Create New Queue in top left corner or click Get Started Now in the center of the page, if it&amp;rsquo;s your first queue in this region.</description></item><item><title>Update Unicorn Management Service</title><link>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/update-unicorn-management-service/update-unicorn-management-service.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/update-unicorn-management-service/update-unicorn-management-service.html</guid><description>After creating the Amazon SNS topic, all the Amazon SQS queues and the subscriptions, the current architecture looks like the following on:
The last missing part to complete the architecture is calling our Amazon SNS topic from our Unicorn Management Service.
Console SAM 1. Grant additional IAM permissions to Lambda In your Amazon IAM console, select Roles in the left navigation. Use the filter text box to find the role with the name %INITIALS%-wild-rydes-async-msg-2-SubmitRideCompletionFunctio-.</description></item><item><title>Test Topic-Queue Chaining &amp; Load Balancing</title><link>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/test-topic-queue-chaining-and-load-balancer/test-topic-queue-chaining-and-load-balancing.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/test-topic-queue-chaining-and-load-balancer/test-topic-queue-chaining-and-load-balancing.html</guid><description>In this step, we will validate that the Amazon SNS topic is publishing all messages to all subscribers. Because a subscriber can also fail processing a message, we also want to validate that Amazon SNS is redelivering the message, so that we will not miss a single message.
1. Look up the API Gateway endpoint To look-up the API Gateway endpoint URL for the submit-ride-completion function, run the following command:</description></item><item><title>Clean up</title><link>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/clean-up/clean-up.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/clean-up/clean-up.html</guid><description>In this step, we will clean up all resources, we created during this lab, so that no further cost will occur.
1. Delete the AWS SAM template In your Cloud9 IDE, run the following command to delete the resources we created with our AWS SAM template (assuming your have chosen %INITIALS%-wild-rydes-async-msg-2 as your stack name):
cd ~/environment/wild-rydes-async-messaging/lab-2 aws cloudformation delete-stack \ --stack-name %INITIALS%-wild-rydes-async-msg-2 2. Delete the AWS Lambda created Amazon CloudWatch Log Group Follow this deep link to list all Amazon CloudWatch Log Groups with the prefix /aws/lambda/%INITIALS%-wild-rydes-async-msg-2 (assuming your have chosen %INITIALS%-wild-rydes-async-msg-2 as your stack name), AWS Lambda created during this lab.</description></item><item><title>Console</title><link>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/clean-up/clean-up-console.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/clean-up/clean-up-console.html</guid><description>4. Delete the Amazon SNS topic In your Amazon SNS console, select Topic in the left navigation pane, select the %INITIALS%-RideCompletionTopic and click the Delete button in the top right corner.
Detailed description You are done!</description></item><item><title>Console</title><link>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-customer-accounting-service-subscription/create-customer-accounting-service-subscription-console.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-customer-accounting-service-subscription/create-customer-accounting-service-subscription-console.html</guid><description>1. Create a new Amazon SQS queue In your Amazon SQS console, select Create New Queue in top left corner or click Get Started Now in the center of the page, if it&amp;rsquo;s your first queue in this region.
Detailed description Enter %INITIALS%-CustomerAccountingServiceQueue as Queue Name, make sure Standard Queue is highlighted and the queue name is prefixed with your initials. Click Create Queue.</description></item><item><title>Console</title><link>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-customer-notification-service-subscription/create-customer-notification-service-subscription-console.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-customer-notification-service-subscription/create-customer-notification-service-subscription-console.html</guid><description>1. Create a new Amazon SQS queue In your Amazon SQS console, select Create New Queue in top left corner or click Get Started Now in the center of the page, if it&amp;rsquo;s your first queue in this region.
Detailed description Enter %INITIALS%-CustomerNotificationServiceQueue as Queue Name, make sure Standard Queue is highlighted and the queue name is prefixed with your initials. Click Create Queue.</description></item><item><title>Console</title><link>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-extraordinary-rides-service-subscription/create-extraordinary-rides-service-subscription-console.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-extraordinary-rides-service-subscription/create-extraordinary-rides-service-subscription-console.html</guid><description>1. Create a new Amazon SQS queue In your Amazon SQS console, select Create New Queue in top left corner or click Get Started Now in the center of the page, if it&amp;rsquo;s your first queue in this region.
Detailed description Enter %INITIALS%-ExtraordinaryRidesServiceQueue as Queue Name, make sure Standard Queue is highlighted and the queue name is prefixed with your initials. Click Create Queue.</description></item><item><title>Console</title><link>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-sns-topic/create-sns-topic-console.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-sns-topic/create-sns-topic-console.html</guid><description>1. Browse to the Amazon SNS console In your Amazon SNS console, select Topic in the left navigation pane and click the Create topic button in the top right corner.
Detailed description 2. Create the Ride Completion Topic Choose Standard topic type. Enter the topic name %INITIALS%-RideCompletionTopic and leave the default values. Remember to prefix the name with your initials. Scroll to the bottom of the page and click Create topic.</description></item><item><title>Console</title><link>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/update-unicorn-management-service/update-unicorn-management-service-console.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/update-unicorn-management-service/update-unicorn-management-service-console.html</guid><description>1. Grant additional IAM permissions to Lambda In your Amazon IAM console, select Roles in the left navigation. Use the filter text box to find the role with the name %INITIALS%-wild-rydes-async-msg-2-SubmitRideCompletionFunctio-... (assuming your have chosen ``%INITIALS%-wild-rydes-async-msg-2` as your stack name).
Detailed description Click on the role name and click Add inline policy to attache another one.
Detailed description Select the JSON tab and passed the following policy statement into it, after you have substitute &amp;laquo;&amp;hellip;&amp;raquo; with the correct values.</description></item><item><title>SAM</title><link>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/clean-up/clean-up-sam.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/clean-up/clean-up-sam.html</guid><description>3. Delete the Amazon S3 bucket In your Cloud9 IDE, run the following command to delete the Amazon S3 bucket we created earlier:
aws s3 rb s3://${BUCKET_NAME} —-force You are done!</description></item><item><title>SAM</title><link>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-customer-accounting-service-subscription/create-customer-accounting-service-subscription-sam.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-customer-accounting-service-subscription/create-customer-accounting-service-subscription-sam.html</guid><description>1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-2/template.yaml. In the Resources section, add the definition for an Amazon SQS queue with the name CustomerAccountingServiceQueue, the CustomerAccountingService will use to consume messages from. You can find the AWS CloudFormation documentation to do so here.
Cheat Sheet CustomerAccountingServiceQueue: Type: AWS::SQS::Queue The next step, before we can define the subscription, is granting our Amazon SNS topic the permissions to publish messages into this Amazon SQS queue.</description></item><item><title>SAM</title><link>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-customer-notification-service-subscription/create-customer-notification-service-subscription-sam.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-customer-notification-service-subscription/create-customer-notification-service-subscription-sam.html</guid><description>1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file &amp;lsquo;wild-rydes-async-messaging/lab-2/template.yaml&amp;rsquo;. In the Resources section, add the definition for an Amazon SQS queue with the name CustomerNotificationServiceQueue, the CustomerNotificationService will use to consume messages from. You can find the AWS CloudFormation documentation to do so here.
Cheat Sheet CustomerNotificationServiceQueue: Type: AWS::SQS::Queue The next step, before we can define the subscription, is granting our Amazon SNS topic the permissions to publish messages into this Amazon SQS queue.</description></item><item><title>SAM</title><link>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-extraordinary-rides-service-subscription/create-extraordinary-rides-service-subscription-sam.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-extraordinary-rides-service-subscription/create-extraordinary-rides-service-subscription-sam.html</guid><description>1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-2/template.yaml. In the Resources section, add the definition for an Amazon SQS queue with the name ExtraordinaryRidesServiceQueue, the ExtraordinaryRidesService will use to consume messages from. You can find the AWS CloudFormation documentation to do so here.
Cheat Sheet ExtraordinaryRidesServiceQueue: Type: AWS::SQS::Queue The next step, before we can define the subscription, is granting our Amazon SNS topic the permissions to publish messages into this Amazon SQS queue.</description></item><item><title>SAM</title><link>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-sns-topic/create-sns-topic-sam.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-sns-topic/create-sns-topic-sam.html</guid><description>1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-2/template.yaml. In the Resources section, add the definition for an Amazon SNS topic with the name %INITIALS%-RideCompletionTopic. Remember to prefix the topic name with your initials. You can find the AWS CloudFormation documentation to do so here.
Cheat Sheet RideCompletionTopic: Type: AWS::SNS::Topic Detailed description In the picture below, SNS topic name prefix is for sample user Jan Nowak with jn as initials.</description></item><item><title>SAM</title><link>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/update-unicorn-management-service/update-unicorn-management-service-sam.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/update-unicorn-management-service/update-unicorn-management-service-sam.html</guid><description>1. Grant additional IAM permissions to Lambda In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-2/template.yaml. In the Resources section, look for the SubmitRideCompletionFunction definition. It already contains one policies entry called DynamoDBCrudPolicy. Directly below, add a policy entry which grants Amazon SNS publish message permission. You can look up the supported policies here.
Cheat Sheet - SNSPublishMessagePolicy: TopicName: !GetAtt RideCompletionTopic.TopicName Detailed description 2.</description></item></channel></rss>