[{"uri":"https://marcinbelczewski.github.io/asynchronous-messaging-workshop/","title":"Decoupled Microservices","tags":[],"description":"","content":"Welcome Builders! Extend the existing and successful Wild Rydes service with asynchronous messaging for our microservices to allow us to scale reliable into new dimensions.\nOne of the implications of applying the microservices architectural style in Wild Rydes is that a lot of communication between components is done over the network. In order to be able to individually scale, operate, and evolve each service, this communication needs to happen in a loosely coupled manner. One option that our initial architect have in mind here is that all services expose an API following the REST architectural style.\nUsing REST APIs for communications between a set of systems can decouple them to a certain degree, but only if applied properly - which is often not the case. Additionally, REST APIs tend to be designed with synchronous communications, which limits the potential for decoupling when you think about request paths through a landscape of microservices. However, there is another option that provides even looser coupling: asynchronous messaging.\nAsynchronous messaging is a fundamental approach for integrating independent systems, or building up a set of loosely coupled systems that can operate, scale, and evolve independently and flexibly. One could also quote our colleague Tim Bray on this:\n If your application is cloud-native, or large-scale, or distributed, and doesn’t include a messaging component, that’s probably a bug.\n Within this workshop, we will introduce asynchronous messaging into Wild Rydes to support the ever growing demand of our business.\n  "},{"uri":"https://marcinbelczewski.github.io/asynchronous-messaging-workshop/prerequisites/prerequisites-1.html","title":"Account Setup","tags":[],"description":"","content":"Region selection Use a single region - US East (N. Virginia), also known as us-east-1, for the duration of this workshop. Please select US East (N. Virginia) in the top right corner.\nStarting AWS Cloud9 IDE [AWS Cloud9][cloud9] is a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser. It includes a code editor, debugger, and terminal. Cloud9 comes pre-packaged with essential tools for popular programming languages and the AWS Command Line Interface (CLI) pre-installed so you don’t need to install files or configure your laptop for this workshop.\nYour Cloud9 environment will have access to the same AWS resources as the user with which you logged into the AWS Management Console. We strongly recommend using Cloud9 to complete this workshop.\nStep-by-step Instructions\n From the AWS Management Console, Select Services then select Cloud9 under Developer Tools.   Select Create environment.\n  Enter %INITIALS%-wildrydes-webapp-development into Name and optionally provide a Description. :warning: %INITIALS%- means prefixing resource name with participant\u0026rsquo;s initials to avoid resources names clashes with other workshop participants. For example in the picture below participant Jan Nowak, with jn initials, creates the Cloud9 environment named jn-wildrydes-webapp-development.\n   Select Next step.\n  In Environment settings:\n   Set the Instance type to t2.micro (1 GiB RAM + 1 vCPU). Choose training | vpc-0f41a5893958f5b6e as Network (VPC) Choose training-public-a or training-public-b as Subnet   Select Next step.\n  Review the environment settings and select Create environment. It will take a couple of minutes for your Cloud9 environment to be provisioned and prepared.\n  Setting up Cloud9 IDE  Once ready, your IDE will open to a welcome screen. Below that, you should see a terminal prompt. Close the Welcome tab and drag up the terminal window to give yourself more space to work in.   You can run AWS CLI commands in here just like you would on your local computer. Remember for this workshop to run all commands within the Cloud9 terminal window rather than on your local computer. Keep your AWS Cloud9 IDE opened in a browser tab throughout this workshop.  Verify that your user is logged in by running the command aws sts get-caller-identity. Copy and paste the command into the Cloud9 terminal window.  aws sts get-caller-identity  You\u0026rsquo;ll see output indicating your account and user information:  { \u0026#34;Account\u0026#34;: \u0026#34;123456789012\u0026#34;, \u0026#34;UserId\u0026#34;: \u0026#34;AKIAIOSFODNN7EXAMPLE\u0026#34;, \u0026#34;Arn\u0026#34;: \u0026#34;arn:aws:iam::123456789012:user/Alice\u0026#34; } "},{"uri":"https://marcinbelczewski.github.io/asynchronous-messaging-workshop/prerequisites.html","title":"Workshop Prerequisites","tags":[],"description":"","content":"You can use the orange arrowheads on the left and right of the main frame to navigate between the chapters, or the navigation bar in the left frame.\nBefore we can start, we have to make sure our environment is up and running and current. Just click the orange arrowheads on the right to get started.\n"},{"uri":"https://marcinbelczewski.github.io/asynchronous-messaging-workshop/prerequisites/prerequisites-2/prerequisites-2.html","title":"Configure AWS Cloud9","tags":[],"description":"","content":" Ad blockers, javascript disabler, and tracking blockers should be disabled for the cloud9 domain, or connecting to the workspace might be impacted. Cloud9 requires third-party-cookies. You can whitelist the specific domains.\n 1. Configure your AWS Cloud9 development environment In your AWS Cloud9 IDE (find yours by your initials prefix), you can close the welcome tab. Run the following command in the bash tab (at the bottom of the IDE):\ngit clone https://github.com/marcinbelczewski/asynchronous-messaging-workshop.git ~/environment/wild-rydes-async-messaging mv ~/environment/wild-rydes-async-messaging/code/lab-* ~/environment/wild-rydes-async-messaging rm -fr ~/environment/wild-rydes-async-messaging/workshop/ rm -fr ~/environment/wild-rydes-async-messaging/code/ You are now ready to get started!!!\n"},{"uri":"https://marcinbelczewski.github.io/asynchronous-messaging-workshop/choose-your-own-advanture.html","title":"Choose Your Own Adventure","tags":[],"description":"","content":"\n"},{"uri":"https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer.html","title":"Topic-Queue Chaining &amp; Load Balancing","tags":[],"description":"","content":" Make sure you executed the Workshop Prerequisites first, before you start with this lab!\n Let’s look once more at the publish/subscribe channel between the unicorn management service and all 3 backend services on the right hand side that are interested in getting notified about ride completions.\nOne of these services could happen to be taken offline for maintenance. Or the code that processes messages coming in from the ride completion topic could run into an exception. These are two examples where a subscriber service could potentially miss topic messages. A good pattern to apply here is topic-queue-chaining. That means that you add a queue, in our case an Amazon SQS queue, between the ride completion Amazon SNS topic and each of the subscriber services.\nAs messages are buffered in a persistent manner in an SQS queue, no message will get lost should a subscriber process run into problems for many hours or days, or has exceptions or crashes.\nBut there is even more to it. By having an Amazon SQS queue in front of each subscriber service, we can leverage the fact that a queue can act as a buffering load-balancer. Due to nature that every queue message is delivered to one of potentially many consumer processes, you can easily scale your subscriber services out \u0026amp; in and the message load will be distributed over the available consumer processes. Furthermore, since messages are buffered in the queue, also a scaling event, for instance when you need to wait until an additional consumer process becomes operational, will not make you lose messages.\nIn this lab, we will develop the architecture below:\nLab Objectives In this lab, you will acquire the following skills:\n How to create an Amazon SQS queue? How to leverage Amazon SQS as event source for AWS Lambda? How to add an Amazon SQS subscription to an Amazon SNS topic? How to define a subscription filter in an Amazon SNS subscriptions? How to call Amazon SNS from AWS Lambda?  Lab source code\nIf you are curious and would like to dive into the lab\u0026rsquo;s source code, you are more than welcome to do so. You will find the source code of this lab in our Github repo here.\n "},{"uri":"https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/bootstrap-initial-state/bootstrap-initial-state.html","title":"Bootstrap the Initial State","tags":[],"description":"","content":"First, we will setup the initial state, including the integrating of the Unicorn Management Service (leveraging Amazon API Gateway and AWS Lambda), the Rides Store (leveraging Amazon DynamoDB) and all 3 backend services (leveraging AWS Lambda).\n1. Browse to your AWS Cloud9 IDE Browse to your AWS Cloud9 Console and select the environment called %INITIALS%-wildrydes-webapp-development.\n  Detailed description     2. Build the lab artifacts from source We provide you with an AWS SAM template which we will use to bootstrap the initial state. In the bash tab (at the bottom) in you AWS Cloud9 IDE, run the following commands to build the lab code:\ncd ~/environment/wild-rydes-async-messaging/lab-2 sam build   Detailed description     3. Deploy the application Now we are ready to deploy the application, by running the following command in the lab-2 directory. Prefix stack name with your initials to avoid clashes with other participants!:\nexport AWS_REGION=$(aws --profile default configure get region) sam deploy \\  --stack-name %INITIALS%-wild-rydes-async-msg-2 \\  --capabilities CAPABILITY_IAM \\  --region us-east-1 \\  --guided  Confirm the first 2 proposed arguments by hitting ENTER. Provide your initials as unique prefix for 3rd option Parameter UserPrefix and hit ENTER. Confirm the next 2 proposed arguments by hitting ENTER. When you get asked SubmitRideCompletionFunction may not have authorization defined, Is this okay? [y/N]:, enter y. Confirm remaining proposed arguments by hitting ENTER.  4. Wait until the stack is successfully deployed It takes usually 4 minutes until the stack launched. You can monitor the progress of the %INITIALS%-wild-rydes-async-msg-2 stack in your SAM CLI or your AWS CloudFormation Console. When the stack is launched, the status will change from CREATE_IN_PROGRESS to CREATE_COMPLETE.\n  Detailed description     In the meantime while your waiting, you may want to have a look at the AWS SAM template to make yourself familiar with the stack we launched. Just click on the template.yaml attachment below to see the content.\n  Related files   template.yaml  (7 kb)    "},{"uri":"https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-sns-topic/create-sns-topic.html","title":"Create the Amazon SNS topic","tags":[],"description":"","content":"In this step, you can chose whether you want to create the Amazon SNS topic via the AWS console or AWS SAM. Just select the corresponding tab below and follow the instructions:\nYou can chose, whether you would like to use the AWS Console or AWS SAM for this lab. Once you have chosen, stick to it until the end of this lab and don\u0026rsquo;t switch in between!\n  Console SAM  1. Browse to the Amazon SNS console In your Amazon SNS console, select Topic in the left navigation pane and click the Create topic button in the top right corner.\n  Detailed description     2. Create the Ride Completion Topic Choose Standard topic type. Enter the topic name %INITIALS%-RideCompletionTopic and leave the default values. Remember to prefix the name with your initials. Scroll to the bottom of the page and click Create topic.\n  Detailed description   In the picture below SNS topic name prefix is for sample user Jan Nowak with jn as initials.    1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-2/template.yaml. In the Resources section, add the definition for an Amazon SNS topic with the name %INITIALS%-RideCompletionTopic. Remember to prefix the topic name with your initials. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet    RideCompletionTopic: Type: AWS::SNS::Topic      Detailed description   In the picture below, SNS topic name prefix is for sample user Jan Nowak with jn as initials.   2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SNS topic:\ncd ~/environment/wild-rydes-async-messaging/lab-2 sam build Now we are ready to update the application, by running the following command to deploy the change. Remember about your initials prefix in CloudFormation stack name:\nsam deploy \\  --guided \\  --stack-name %INITIALS%-wild-rydes-async-msg-2 \\  --capabilities CAPABILITY_IAM  In the meantime while your waiting, you may want to have a look at the AWS SAM template to make yourself familiar with the stack we launched. Just click on the template.yaml attachment below to see the content.\nBecause AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SNS topic.\n  $(function(){$(\"#style\").tabs();}); "},{"uri":"https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-customer-notification-service-subscription/create-customer-notification-service-subscription.html","title":"Create Customer Notification Service Subscription","tags":[],"description":"","content":"In this step, we will create an Amazon SQS queue for the Customer Notification Service and add a subscription to the Amazon SNS topic we created before:\n Console SAM  1. Create a new Amazon SQS queue In your Amazon SQS console, select Create New Queue in top left corner or click Get Started Now in the center of the page, if it\u0026rsquo;s your first queue in this region.\n  Detailed description     Enter %INITIALS%-CustomerNotificationServiceQueue as Queue Name, make sure Standard Queue is highlighted and the queue name is prefixed with your initials. Click Create Queue.\n  Detailed description     2. Create a new subscription After creating %INITIALS%-CustomerNotificationServiceQueue, click the Subscribe to Amazon SNS topic button.\n  Detailed description     From the drop down, select the %INITIALS%-RideCompletionTopic ARN and click Save.\n  Detailed description     You may wondering why we don\u0026rsquo;t create the subscription from the Amazon SNS console as shown below. If we create a subscription from Amazon SNS to Amazon SQS, Amazon SNS will send a confirmation message first to Amazon SQS. As long as this subscription is not confirmed, Amazon SNS will not start sending messages to Amazon SQS. By initiating the subscription from the subscriber side, this is not necessary.  3. Validate the subscription confirmation Browse to your Amazon SNS console to list your existing topics. Select the %INITIALS%-RideCompletionTopic and verify, the subscription has the status Confirmed.\n  Detailed description     4. Grant permissions to our function to access the Amazon SQS queue In your Amazon IAM console, select Roles in the left navigation. Use the filter text box to find the role with the name %INITIALS%-wild-rydes-async-msg-2-CustomerNotificationService-... (assuming your have chosen %INITIALS%-wild-rydes-async-msg-2 as your stack name).\n  Detailed description     Click on the role name and click Add inline policy to attache another one.\n  Detailed description     Select the JSON tab and passed the following policy statement into it, after you have substitute \u0026laquo;\u0026hellip;\u0026raquo; and %INITIALS% with the correct values. It will add the permission to your Lambda function to access the Amazon SQS queue:\n  policy   { \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;sqs:ChangeMessageVisibility\u0026#34;, \u0026#34;sqs:ChangeMessageVisibilityBatch\u0026#34;, \u0026#34;sqs:DeleteMessage\u0026#34;, \u0026#34;sqs:DeleteMessageBatch\u0026#34;, \u0026#34;sqs:GetQueueAttributes\u0026#34;, \u0026#34;sqs:ReceiveMessage\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:sqs:\u0026lt;\u0026lt;AWS REGION\u0026gt;\u0026gt;:\u0026lt;\u0026lt;AWS ACCOUNT ID\u0026gt;\u0026gt;:%INITIALS%-CustomerNotificationServiceQueue\u0026#34; } ] }    Make sure you provide the AWS ACCOUNT ID in the form of XXXXXXXXXXXX and not XXXX-XXXX-XXXX!\n Click Review policy and enter the Name CustomerNotificationServiceRolePolicy0. Click Create policy. To validate this step, select on the role again and your should see 3 policies attached to your role, including the one you just have created:\n  Detailed description     5. Add the Amazon SQS queue as event source for your Customer Notification Service AWS Lambda function Open your AWS Lambda console and select Functions in the left navigation. Click on the function with the name %INITIALS%-wild-rydes-async-msg-2-CustomerNotification... (assuming your have chosen %INITIALS%-wild-rydes-async-msg-2 as your stack name). Click on the + Add Trigger button on the left side of the page:\n  Detailed description     On the following page, select SQS as the event source for this AWS Lambda function. For the SQS queue, select the %INITIALS%-CustomerNotificationServiceQueue and set the batch size to 1. Don\u0026rsquo;t forget to enable the trigger, before you click the Add button in the lower right corner.\n  Detailed description     After some seconds, the trigger will be enabled and and you are ready to go (you may have to refresh the site a few times).\n  Detailed description      1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file \u0026lsquo;wild-rydes-async-messaging/lab-2/template.yaml\u0026rsquo;. In the Resources section, add the definition for an Amazon SQS queue with the name CustomerNotificationServiceQueue, the CustomerNotificationService will use to consume messages from. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerNotificationServiceQueue: Type: AWS::SQS::Queue    The next step, before we can define the subscription, is granting our Amazon SNS topic the permissions to publish messages into this Amazon SQS queue. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerNotificationServiceQueuePolicy: Type: AWS::SQS::QueuePolicy Properties: Queues: - !Ref CustomerNotificationServiceQueue PolicyDocument: Statement: Effect: Allow Principal: \u0026#39;*\u0026#39; Action: sqs:SendMessage Resource: \u0026#39;*\u0026#39; Condition: ArnEquals: aws:SourceArn: !Ref RideCompletionTopic    Now we are ready to create the Amazon SNS subscription for the CustomerNotificationService. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerNotificationServiceQueueToRidesTopicSubscription: Type: AWS::SNS::Subscription Properties: Endpoint: !GetAtt CustomerNotificationServiceQueue.Arn Protocol: sqs RawMessageDelivery: true TopicArn: !Ref RideCompletionTopic    The next step is to attache an AWS IAM policy tou our CustomerNotificationService AWS Lambda function, which grants permission to access our previously created Amazon SQS queue, to consume the messages. You can find the AWS SAM documentation to do so here and here.\n  Cheat Sheet   Policies: - SQSPollerPolicy: QueueName: !Ref CustomerNotificationServiceQueue    Last but not least, we have to declare the CustomerNotificationServiceQueue as event source for our CustomerNotificationService. You can find the AWS SAM documentation to do so here.\n  Cheat Sheet   Events: CustomerNotificationServiceJobQueue: Type: SQS Properties: Queue: !GetAtt CustomerNotificationServiceQueue.Arn BatchSize: 1      Detailed description     2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SQS queue and the Amazon SNS subscription:\ncd ~/environment/wild-rydes-async-messaging/lab-2 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name %INITIALS-wild-rydes-async-msg-2 \\  --capabilities CAPABILITY_IAM In the meantime while your waiting, you may want to have a look at the AWS SAM template to make yourself familiar with the stack we launched. Just click on the template.yaml attachment below to see the content.\nBecause AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SQS queue and the Amazon SNS subscription.\n  $(function(){$(\"#style\").tabs();}); "},{"uri":"https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-customer-accounting-service-subscription/create-customer-accounting-service-subscription.html","title":"Create Customer Accounting Service Subscription","tags":[],"description":"","content":"In this step, we will create an Amazon SQS queue for the Customer Accounting Service and add a subscription to the Amazon SNS topic we created before:\n Console SAM  1. Create a new Amazon SQS queue In your Amazon SQS console, select Create New Queue in top left corner or click Get Started Now in the center of the page, if it\u0026rsquo;s your first queue in this region.\n  Detailed description     Enter %INITIALS%-CustomerAccountingServiceQueue as Queue Name, make sure Standard Queue is highlighted and the queue name is prefixed with your initials. Click Create Queue.\n  Screenshot     2. Create a new subscription After creating %INITIALS%-CustomerAccountingServiceQueue, click the Subscribe to Amazon SNS topic button.\n  Detailed description     From the drop down, select the %INITIALS%-RideCompletionTopic ARN and click Save.\n  Detailed description     3. Validate the subscription confirmation Browse to your Amazon SNS console to list your existing topics. Select the %INITIALS%-RideCompletionTopic and verify, the subscription has the status Confirmed.\n  Detailed description     4. Grant permissions to our function to access the Amazon SQS queue In your Amazon IAM console, select Roles in the left navigation. Use the filter text box to find the role with the name %INITIALS%-wild-rydes-async-msg-2-CustomerAccountingService-... (assuming your have chosen %INITIALS%-wild-rydes-async-msg-2 as your stack name).\n  Detailed description     Click on the role name and click Add inline policy to attache another one.\n  Detailed description     Select the JSON tab and passed the following policy statement into it, after you have substitute \u0026laquo;\u0026hellip;\u0026raquo; and %INITIALS% with the correct values. It will add the permission to your Lambda function to access the Amazon SQS queue:\n  policy   { \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;sqs:ChangeMessageVisibility\u0026#34;, \u0026#34;sqs:ChangeMessageVisibilityBatch\u0026#34;, \u0026#34;sqs:DeleteMessage\u0026#34;, \u0026#34;sqs:DeleteMessageBatch\u0026#34;, \u0026#34;sqs:GetQueueAttributes\u0026#34;, \u0026#34;sqs:ReceiveMessage\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:sqs:\u0026lt;\u0026lt;AWS REGION\u0026gt;\u0026gt;:\u0026lt;\u0026lt;AWS ACCOUNT ID\u0026gt;\u0026gt;:%INITIALS%-CustomerAccountingServiceQueue\u0026#34; } ] }    Make sure you provide the AWS ACCOUNT ID in the form of XXXXXXXXXXXX and not XXXX-XXXX-XXXX!\n Click Review policy and enter the Name CustomerAccountingServiceRolePolicy0. Click Create policy. To validate this step, select on the role again and your should see 3 policies attached to your role, including the one you just have created:\n  Detailed description     5. Add the Amazon SQS queue as event source for your Customer Notification Service AWS Lambda function Open your AWS Lambda console and select Functions in the left navigation. Click on the function with the name %INITIALS%-wild-rydes-async-msg-2-CustomerAccounting... (assuming your have chosen %INITIALS%-wild-rydes-async-msg-2 as your stack name). Click on the + Add Trigger button on the left side of the page:\n  Detailed description     On the following page, select SQS as the event source for this AWS Lambda function. For the SQS queue, select the %INITIALS%-CustomerAccountingServiceQueue and set the batch size to 1. Don\u0026rsquo;t forget to enable the trigger, before you click the Add button in the lower right corner.\n  Detailed description     After some seconds, the trigger will be enabled and and you are ready to go (you may have to refresh the site a few times).\n  Detailed description      1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-2/template.yaml. In the Resources section, add the definition for an Amazon SQS queue with the name CustomerAccountingServiceQueue, the CustomerAccountingService will use to consume messages from. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerAccountingServiceQueue: Type: AWS::SQS::Queue    The next step, before we can define the subscription, is granting our Amazon SNS topic the permissions to publish messages into this Amazon SQS queue. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerAccountingServiceQueuePolicy: Type: AWS::SQS::QueuePolicy Properties: Queues: - !Ref CustomerAccountingServiceQueue PolicyDocument: Statement: Effect: Allow Principal: \u0026#39;*\u0026#39; Action: sqs:SendMessage Resource: \u0026#39;*\u0026#39; Condition: ArnEquals: aws:SourceArn: !Ref RideCompletionTopic    Now we are ready to create the Amazon SNS subscription for the CustomerAccountingService. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerAccountingServiceQueueToRidesTopicSubscription: Type: AWS::SNS::Subscription Properties: Endpoint: !GetAtt CustomerAccountingServiceQueue.Arn Protocol: sqs RawMessageDelivery: true TopicArn: !Ref RideCompletionTopic    The next step is to attache an AWS IAM policy tou our CustomerAccountingService AWS Lambda function, which grants permission to access our previously created Amazon SQS queue, to consume the messages. You can find the AWS SAM documentation to do so here and here.\n  Cheat Sheet   Policies: - SQSPollerPolicy: QueueName: !Ref CustomerAccountingServiceQueue    Last but not least, we have to declare the CustomerAccountingServiceQueue as event source for our CustomerAccountingService. You can find the AWS SAM documentation to do so here.\n  Cheat Sheet   Events: CustomerAccountingServiceJobQueue: Type: SQS Properties: Queue: !GetAtt CustomerAccountingServiceQueue.Arn BatchSize: 1      Detailed description     2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SQS queue and the Amazon SNS subscription:\ncd ~/environment/wild-rydes-async-messaging/lab-2 sam build sam deploy \\  --guided \\  --stack-name %INITIALS-wild-rydes-async-msg-2 \\  --capabilities CAPABILITY_IAM In the meantime while your waiting, you may want to have a look at the AWS SAM template to make yourself familiar with the stack we launched. Just click on the template.yaml attachment below to see the content.\nBecause AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SQS queue and the Amazon SNS subscription.\n  $(function(){$(\"#style\").tabs();}); "},{"uri":"https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-extraordinary-rides-service-subscription/create-extraordinary-rides-service-subscription.html","title":"Create Extraordinary Rides Service Subscription","tags":[],"description":"","content":"In this step, we will create an Amazon SQS queue for the Extraordinary Rides Service and add a subscription to the Amazon SNS topic we created before:\n Console SAM  1. Create a new Amazon SQS queue In your Amazon SQS console, select Create New Queue in top left corner or click Get Started Now in the center of the page, if it\u0026rsquo;s your first queue in this region.\n  Detailed description     Enter %INITIALS%-ExtraordinaryRidesServiceQueue as Queue Name, make sure Standard Queue is highlighted and the queue name is prefixed with your initials. Click Create Queue.\n  Detailed description     2. Create a new subscription After creating %INITIALS%-ExtraordinaryRidesServiceQueue, click the Subscribe to Amazon SNS topic button.\n  Detailed description     From the drop down, select the %INITIALS%-RideCompletionTopic ARN and click Save.\n  Detailed description     3. Validate the subscription confirmation Browse to your Amazon SNS console to list your existing topics. Select the %INITIALS%-RideCompletionTopic and verify, the subscription has the status Confirmed.\n  Detailed description     4. Add the filter to the subscription Click on the subscription id for the %INITIALS%-ExtraordinaryRidesServiceQueue subscription and click on Edit to add our subscription filter policy. In the subscription filter policy section, add out filter policy. Click Save changes.\n  cheat sheet   { \u0026quot;fare\u0026quot;: [{\u0026quot;numeric\u0026quot;: [\u0026quot;\u0026gt;=\u0026quot;, 50]}], \u0026quot;distance\u0026quot;: [{\u0026quot;numeric\u0026quot;: [\u0026quot;\u0026gt;=\u0026quot;, 20]}] }      Detailed description     5. Grant permissions to our function to access the Amazon SQS queue In your Amazon IAM console, select Roles in the left navigation. Use the filter text box to find the role with the name %INITIALS%-wild-rydes-async-msg-2-ExtraordinaryRidesService-... (assuming your have chosen %INITIALS%-wild-rydes-async-msg-2 as your stack name).\n  Detailed description     Click on the role name and click Add inline policy to attache another one.\n  Detailed description     Select the JSON tab and passed the following policy statement into it, after you have substitute \u0026laquo;\u0026hellip;\u0026raquo; and %INITIALS% with the correct values. It will add the permission to your Lambda function to access the Amazon SQS queue:\n  policy   { \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;sqs:ChangeMessageVisibility\u0026#34;, \u0026#34;sqs:ChangeMessageVisibilityBatch\u0026#34;, \u0026#34;sqs:DeleteMessage\u0026#34;, \u0026#34;sqs:DeleteMessageBatch\u0026#34;, \u0026#34;sqs:GetQueueAttributes\u0026#34;, \u0026#34;sqs:ReceiveMessage\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:sqs:\u0026lt;\u0026lt;AWS REGION\u0026gt;\u0026gt;:\u0026lt;\u0026lt;AWS ACCOUNT ID\u0026gt;\u0026gt;:%INITIALS%-ExtraordinaryRidesServiceQueue\u0026#34; } ] }    Make sure you provide the AWS ACCOUNT ID in the form of XXXXXXXXXXXX and not XXXX-XXXX-XXXX!\n Click Review policy and enter the Name ExtraordinaryRidesServiceRolePolicy0. Click Create policy. To validate this step, select on the role again and your should see 3 policies attached to your role, including the one you just have created:\n  Detailed description     6. Add the Amazon SQS queue as event source for your Customer Notification Service AWS Lambda function Open your AWS Lambda console and select Functions in the left navigation. Click on the function with the name %INITIALS%-wild-rydes-async-msg-2-ExtraordinaryRides... (assuming your have chosen %INITIALS%-wild-rydes-async-msg-2 as your stack name). Click on the + Add Trigger button on the left side of the page:\n  Detailed description     On the following page, select SQS as the event source for this AWS Lambda function. For the SQS queue, select the %INITIALS%-ExtraordinaryRidesServiceQueue and set the batch size to 1. Don\u0026rsquo;t forget to enable the trigger, before you click the Add button in the lower right corner.\n  Detailed description     After some seconds, the trigger will be enabled and and you are ready to go (you may have to refresh the site a few times).\n  Detailed description      1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-2/template.yaml. In the Resources section, add the definition for an Amazon SQS queue with the name ExtraordinaryRidesServiceQueue, the ExtraordinaryRidesService will use to consume messages from. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   ExtraordinaryRidesServiceQueue: Type: AWS::SQS::Queue    The next step, before we can define the subscription, is granting our Amazon SNS topic the permissions to publish messages into this Amazon SQS queue. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   ExtraordinaryRidesServiceQueuePolicy: Type: AWS::SQS::QueuePolicy Properties: Queues: - !Ref ExtraordinaryRidesServiceQueue PolicyDocument: Statement: Effect: Allow Principal: \u0026#39;*\u0026#39; Action: sqs:SendMessage Resource: \u0026#39;*\u0026#39; Condition: ArnEquals: aws:SourceArn: !Ref RideCompletionTopic    Now we are ready to create the Amazon SNS subscription for the ExtraordinaryRidesService. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   ExtraordinaryRidesServiceQueueToRidesTopicSubscription: Type: AWS::SNS::Subscription Properties: Endpoint: !GetAtt ExtraordinaryRidesServiceQueue.Arn Protocol: sqs RawMessageDelivery: true TopicArn: !Ref RideCompletionTopic FilterPolicy: { \u0026#34;fare\u0026#34;: [{\u0026#34;numeric\u0026#34;: [\u0026#34;\u0026gt;=\u0026#34;, 50]}], \u0026#34;distance\u0026#34;: [{\u0026#34;numeric\u0026#34;: [\u0026#34;\u0026gt;=\u0026#34;, 20]}] }    The next step is to attache an AWS IAM policy tou our ExtraordinaryRidesService AWS Lambda function, which grants permission to access our previously created Amazon SQS queue, to consume the messages. You can find the AWS SAM documentation to do so here and here.\n  Cheat Sheet   Policies: - SQSPollerPolicy: QueueName: !Ref ExtraordinaryRidesServiceQueue    Last but not least, we have to declare the ExtraordinaryRidesServiceQueue as event source for our ExtraordinaryRidesService. You can find the AWS SAM documentation to do so here.\n  Cheat Sheet   Events: ExtraordinaryRidesServiceJobQueue: Type: SQS Properties: Queue: !GetAtt ExtraordinaryRidesServiceQueue.Arn BatchSize: 1      Detailed description     2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SQS queue and the Amazon SNS subscription:\ncd ~/environment/wild-rydes-async-messaging/lab-2 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name %INITIALS-wild-rydes-async-msg-2 \\  --capabilities CAPABILITY_IAM In the meantime while your waiting, you may want to have a look at the AWS SAM template to make yourself familiar with the stack we launched. Just click on the template.yaml attachment below to see the content.\nBecause AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SQS queue and the Amazon SNS subscription.\n  $(function(){$(\"#style\").tabs();}); "},{"uri":"https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/update-unicorn-management-service/update-unicorn-management-service.html","title":"Update Unicorn Management Service","tags":[],"description":"","content":"After creating the Amazon SNS topic, all the Amazon SQS queues and the subscriptions, the current architecture looks like the following on:\nThe last missing part to complete the architecture is calling our Amazon SNS topic from our Unicorn Management Service.\n Console SAM  1. Grant additional IAM permissions to Lambda In your Amazon IAM console, select Roles in the left navigation. Use the filter text box to find the role with the name %INITIALS%-wild-rydes-async-msg-2-SubmitRideCompletionFunctio-... (assuming your have chosen ``%INITIALS%-wild-rydes-async-msg-2` as your stack name).\n  Detailed description     Click on the role name and click Add inline policy to attache another one.\n  Detailed description     Select the JSON tab and passed the following policy statement into it, after you have substitute \u0026laquo;\u0026hellip;\u0026raquo; with the correct values. It will add the permission to your Lambda function to publish messages to this particular Amazon SNS topic:\n  policy   { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Action\u0026#34;: [ \u0026#34;sns:Publish\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:sns:\u0026lt;\u0026lt;AWS REGION\u0026gt;\u0026gt;:\u0026lt;\u0026lt;AWS ACCOUNT ID\u0026gt;\u0026gt;:\u0026lt;\u0026lt;SNS TOPIC NAME\u0026gt;\u0026gt;\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34; } ] }    Make sure you provide the AWS ACCOUNT ID in the form of XXXXXXXXXXXX and not XXXX-XXXX-XXXX!\n Click Review policy and enter the Name SubmitRideCompletionFunctionRolePolicy1. Click Create policy. To validate this step, select on the role again and your should see 3 policies attached to your role, including the one you just have created:\n  Detailed description     2. Provide the Amazon SNS topic ARN to Lambda In your AWS Lambda console, select Functions in the left navigation. Use the filter text box to find the function with the name %INITIALS%-wild-rydes-async-msg-2-SubmitRideCompletionFunctio-... (assuming your have chosen %INITIALS%-wild-rydes-async-msg-2 as your stack name).\n  Detailed description     Click on the function name and scroll down to the section Environment variables. Our Lambda function expects an environment variable with the Name TOPIC_ARN. It uses this Amazon SNS topic to publish all messages to. Lookup your Amazon SNS topic name in the Amazon SNS console and add this variable. Click the Save button in the top right corner to save the change.\n  Detailed description     3. Update your Lambda function to call Amazon SNS Open your AWS Lambda console and select Functions in the left navigation. Select the function with the name %INITIALS%-wild-rydes-async-msg-2-SubmitRideCompletionFunctio-... (assuming your have chosen %INITIALS%-wild-rydes-async-msg-2 as your stack name). Scroll a bit down to the section Function code. Add the definition of the sns client directly after the dynamodb client:\n  Cheat Sheet   sns = boto3.client(\u0026#39;sns\u0026#39;, config=config)    After the put item DynamoDB statement and before we are sending the response back to the caller, add the code to publish a message to Amazon SNS:\n  Cheat Sheet   response = sns.publish( TopicArn=TOPIC_ARN, Message=json.dumps(request), MessageAttributes = { \u0026#39;fare\u0026#39;: { \u0026#39;DataType\u0026#39;: \u0026#39;Number\u0026#39;, \u0026#39;StringValue\u0026#39;: str(request[\u0026#39;fare\u0026#39;]) }, \u0026#39;distance\u0026#39;: { \u0026#39;DataType\u0026#39;: \u0026#39;Number\u0026#39;, \u0026#39;StringValue\u0026#39;: str(request[\u0026#39;distance\u0026#39;]) } } )      Detailed description      1. Grant additional IAM permissions to Lambda In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-2/template.yaml. In the Resources section, look for the SubmitRideCompletionFunction definition. It already contains one policies entry called DynamoDBCrudPolicy. Directly below, add a policy entry which grants Amazon SNS publish message permission. You can look up the supported policies here.\n  Cheat Sheet   - SNSPublishMessagePolicy: TopicName: !GetAtt RideCompletionTopic.TopicName      Detailed description     2. Provide the Amazon SNS topic ARN to Lambda In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-2/template.yaml. In the Resources section, look for the SubmitRideCompletionFunction definition. It already contains one environment variables entry called TABLE_NAME. Directly below, add an additional variable with the key TOPIC_ARN and the corresponding value.\n  Cheat Sheet   TOPIC_ARN: !Ref RideCompletionTopic      Detailed description     3. Update your Lambda function to call Amazon SNS In your Cloud9 IDE, open the Python based AWS Lambda function wild-rydes-async-messaging/lab-2/unicorn-management-service/app.py.\nAdd the definition of the sns client directly after the dynamodb client:\n  Cheat Sheet   sns = boto3.client(\u0026#39;sns\u0026#39;, config=config)    After the put item DynamoDB statement and before we are sending the response back to the caller, add the code to publish a message to Amazon SNS:\n  Cheat Sheet   response = sns.publish( TopicArn=TOPIC_ARN, Message=json.dumps(request), MessageAttributes = { \u0026#39;fare\u0026#39;: { \u0026#39;DataType\u0026#39;: \u0026#39;Number\u0026#39;, \u0026#39;StringValue\u0026#39;: str(request[\u0026#39;fare\u0026#39;]) }, \u0026#39;distance\u0026#39;: { \u0026#39;DataType\u0026#39;: \u0026#39;Number\u0026#39;, \u0026#39;StringValue\u0026#39;: str(request[\u0026#39;distance\u0026#39;]) } } )      Detailed description     4. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the additional policy:\ncd ~/environment/wild-rydes-async-messaging/lab-2 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name %INITIALS-wild-rydes-async-msg-2 \\  --capabilities CAPABILITY_IAM In the meantime while your waiting, you may want to have a look at the AWS SAM template to make yourself familiar with the stack we launched. Just click on the template.yaml attachment below to see the content.\nBecause AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new version.\n  $(function(){$(\"#style\").tabs();}); "},{"uri":"https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/test-topic-queue-chaining-and-load-balancer/test-topic-queue-chaining-and-load-balancing.html","title":"Test Topic-Queue Chaining &amp; Load Balancing","tags":[],"description":"","content":"In this step, we will validate that the Amazon SNS topic is publishing all messages to all subscribers. Because a subscriber can also fail processing a message, we also want to validate that Amazon SNS is redelivering the message, so that we will not miss a single message.\n1. Look up the API Gateway endpoint To look-up the API Gateway endpoint URL for the submit-ride-completion function, run the following command:\naws cloudformation describe-stacks \\  --stack-name %INITIALS%-wild-rydes-async-msg-2 \\  --query \u0026#39;Stacks[].Outputs[?OutputKey==`UnicornManagementServiceApiSubmitRideCompletionEndpoint`].OutputValue\u0026#39; \\  --output text 2. Send a couple requests to the Unicorn Management Service Let\u0026rsquo;s store this API Gateway endpoint URL in an environment variable, so we don\u0026rsquo;t have to repeat it all the time:\nexport ENDPOINT=$(aws cloudformation describe-stacks \\  --stack-name %INITIALS%-wild-rydes-async-msg-2 \\  --query \u0026#39;Stacks[].Outputs[?OutputKey==`UnicornManagementServiceApiSubmitRideCompletionEndpoint`].OutputValue\u0026#39; \\  --output text) To send a couple requests to the submit ride completion endpoint, execute the command below 5 or more times and change the request payload to test the filter criteria for the Extraordinary Rides Service:\ncurl -XPOST -i -H \u0026#34;Content-Type:application/json\u0026#34; -d \u0026#39;{ \u0026#34;from\u0026#34;: \u0026#34;Berlin\u0026#34;, \u0026#34;to\u0026#34;: \u0026#34;Frankfurt\u0026#34;, \u0026#34;duration\u0026#34;: 420, \u0026#34;distance\u0026#34;: 600, \u0026#34;customer\u0026#34;: \u0026#34;cmr\u0026#34;, \u0026#34;fare\u0026#34;: 256.50 }\u0026#39; $ENDPOINT    Detailed description     3. Validate the message reception Go to your Amazon CloudWatch Log console and lookup all Log Groups with the prefix /aws/lambda/%INITIALS%-wild-rydes-async-msg-2 (assuming your have chosen %INITIALS%-wild-rydes-async-msg-2 as your stack name).\n  Detailed description     Click one the name of the Log Groups to see all Log Streams available for this Log Group.\n  Detailed description     Browse the most recent Log Streams to validate, that it could successfully process the message. You should also see some log entries, indicating a failed message processing. Shortly after, you should see the message redelivery from Amazon SNS and the successful message processing log entry.\n  Detailed description     Browse all Log Groups to validate, that each of our 5 backend service could successfully process the message.\n"},{"uri":"https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/clean-up/clean-up.html","title":"Clean up","tags":[],"description":"","content":"In this step, we will clean up all resources, we created during this lab, so that no further cost will occur.\n1. Delete the AWS SAM template In your Cloud9 IDE, run the following command to delete the resources we created with our AWS SAM template (assuming your have chosen %INITIALS%-wild-rydes-async-msg-2 as your stack name):\ncd ~/environment/wild-rydes-async-messaging/lab-2 aws cloudformation delete-stack \\  --stack-name %INITIALS%-wild-rydes-async-msg-2 2. Delete the AWS Lambda created Amazon CloudWatch Log Group Follow this deep link to list all Amazon CloudWatch Log Groups with the prefix /aws/lambda/%INITIALS%-wild-rydes-async-msg-2 (assuming your have chosen %INITIALS%-wild-rydes-async-msg-2 as your stack name), AWS Lambda created during this lab. Select all the Amazon CloudWatch Log Group one after each other and choose Delete log group from the Actions menu.\n"},{"uri":"https://marcinbelczewski.github.io/asynchronous-messaging-workshop/cleanups.html","title":"Clean up","tags":[],"description":"","content":" Running the workshop at an AWS Event\nIf you are running this workshop at an AWS hosted event, such as re:Invent, Loft, Immersion Day, or any other event hosted by an AWS employee, you skip this section, as we will clean up everything for you.\n In this step, we will clean up the AWS Cloud9 IDE we have created at the very beginning.\n1. Delete the AWS Cloud9 IDE Follow this deep link to list the AWS CloudFormation stack with the name wild-rydes-async-msg-0. Select the stack and choose Delete.\n  Detailed description      Open the AWS CloudFormation Console Select wild-rydes-lab-x stack from the list of Stacks Click the Delete button On the confirmation modal screen that appears, click Delete Stack button   Note: You will need to delete the S3 bucket you created for this lab manually.\n That\u0026rsquo;s it! All done.\n"},{"uri":"https://marcinbelczewski.github.io/asynchronous-messaging-workshop/resources.html","title":"Resources","tags":[],"description":"","content":"Congratulations! You\u0026rsquo;ve successfully completed the Decoupled Microservices Workshop!\nPresentation \nGeneral Messaging Resources  AWS Messaging Site AWS Messaging Related Blog Posts  Orchestration and Coordination  AWS Step Functions AWS Step Functions Developer Guide AWS Step Function Tutorials statelint Amazon States Language  "},{"uri":"https://marcinbelczewski.github.io/asynchronous-messaging-workshop/categories.html","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/clean-up/clean-up-console.html","title":"Console","tags":[],"description":"","content":"4. Delete the Amazon SNS topic In your Amazon SNS console, select Topic in the left navigation pane, select the %INITIALS%-RideCompletionTopic and click the Delete button in the top right corner.\n  Detailed description     You are done!\n"},{"uri":"https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-customer-accounting-service-subscription/create-customer-accounting-service-subscription-console.html","title":"Console","tags":[],"description":"","content":"1. Create a new Amazon SQS queue In your Amazon SQS console, select Create New Queue in top left corner or click Get Started Now in the center of the page, if it\u0026rsquo;s your first queue in this region.\n  Detailed description     Enter %INITIALS%-CustomerAccountingServiceQueue as Queue Name, make sure Standard Queue is highlighted and the queue name is prefixed with your initials. Click Create Queue.\n  Screenshot     2. Create a new subscription After creating %INITIALS%-CustomerAccountingServiceQueue, click the Subscribe to Amazon SNS topic button.\n  Detailed description     From the drop down, select the %INITIALS%-RideCompletionTopic ARN and click Save.\n  Detailed description     3. Validate the subscription confirmation Browse to your Amazon SNS console to list your existing topics. Select the %INITIALS%-RideCompletionTopic and verify, the subscription has the status Confirmed.\n  Detailed description     4. Grant permissions to our function to access the Amazon SQS queue In your Amazon IAM console, select Roles in the left navigation. Use the filter text box to find the role with the name %INITIALS%-wild-rydes-async-msg-2-CustomerAccountingService-... (assuming your have chosen %INITIALS%-wild-rydes-async-msg-2 as your stack name).\n  Detailed description     Click on the role name and click Add inline policy to attache another one.\n  Detailed description     Select the JSON tab and passed the following policy statement into it, after you have substitute \u0026laquo;\u0026hellip;\u0026raquo; and %INITIALS% with the correct values. It will add the permission to your Lambda function to access the Amazon SQS queue:\n  policy   { \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;sqs:ChangeMessageVisibility\u0026#34;, \u0026#34;sqs:ChangeMessageVisibilityBatch\u0026#34;, \u0026#34;sqs:DeleteMessage\u0026#34;, \u0026#34;sqs:DeleteMessageBatch\u0026#34;, \u0026#34;sqs:GetQueueAttributes\u0026#34;, \u0026#34;sqs:ReceiveMessage\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:sqs:\u0026lt;\u0026lt;AWS REGION\u0026gt;\u0026gt;:\u0026lt;\u0026lt;AWS ACCOUNT ID\u0026gt;\u0026gt;:%INITIALS%-CustomerAccountingServiceQueue\u0026#34; } ] }    Make sure you provide the AWS ACCOUNT ID in the form of XXXXXXXXXXXX and not XXXX-XXXX-XXXX!\n Click Review policy and enter the Name CustomerAccountingServiceRolePolicy0. Click Create policy. To validate this step, select on the role again and your should see 3 policies attached to your role, including the one you just have created:\n  Detailed description     5. Add the Amazon SQS queue as event source for your Customer Notification Service AWS Lambda function Open your AWS Lambda console and select Functions in the left navigation. Click on the function with the name %INITIALS%-wild-rydes-async-msg-2-CustomerAccounting... (assuming your have chosen %INITIALS%-wild-rydes-async-msg-2 as your stack name). Click on the + Add Trigger button on the left side of the page:\n  Detailed description     On the following page, select SQS as the event source for this AWS Lambda function. For the SQS queue, select the %INITIALS%-CustomerAccountingServiceQueue and set the batch size to 1. Don\u0026rsquo;t forget to enable the trigger, before you click the Add button in the lower right corner.\n  Detailed description     After some seconds, the trigger will be enabled and and you are ready to go (you may have to refresh the site a few times).\n  Detailed description     "},{"uri":"https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-customer-notification-service-subscription/create-customer-notification-service-subscription-console.html","title":"Console","tags":[],"description":"","content":"1. Create a new Amazon SQS queue In your Amazon SQS console, select Create New Queue in top left corner or click Get Started Now in the center of the page, if it\u0026rsquo;s your first queue in this region.\n  Detailed description     Enter %INITIALS%-CustomerNotificationServiceQueue as Queue Name, make sure Standard Queue is highlighted and the queue name is prefixed with your initials. Click Create Queue.\n  Detailed description     2. Create a new subscription After creating %INITIALS%-CustomerNotificationServiceQueue, click the Subscribe to Amazon SNS topic button.\n  Detailed description     From the drop down, select the %INITIALS%-RideCompletionTopic ARN and click Save.\n  Detailed description     You may wondering why we don\u0026rsquo;t create the subscription from the Amazon SNS console as shown below. If we create a subscription from Amazon SNS to Amazon SQS, Amazon SNS will send a confirmation message first to Amazon SQS. As long as this subscription is not confirmed, Amazon SNS will not start sending messages to Amazon SQS. By initiating the subscription from the subscriber side, this is not necessary.  3. Validate the subscription confirmation Browse to your Amazon SNS console to list your existing topics. Select the %INITIALS%-RideCompletionTopic and verify, the subscription has the status Confirmed.\n  Detailed description     4. Grant permissions to our function to access the Amazon SQS queue In your Amazon IAM console, select Roles in the left navigation. Use the filter text box to find the role with the name %INITIALS%-wild-rydes-async-msg-2-CustomerNotificationService-... (assuming your have chosen %INITIALS%-wild-rydes-async-msg-2 as your stack name).\n  Detailed description     Click on the role name and click Add inline policy to attache another one.\n  Detailed description     Select the JSON tab and passed the following policy statement into it, after you have substitute \u0026laquo;\u0026hellip;\u0026raquo; and %INITIALS% with the correct values. It will add the permission to your Lambda function to access the Amazon SQS queue:\n  policy   { \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;sqs:ChangeMessageVisibility\u0026#34;, \u0026#34;sqs:ChangeMessageVisibilityBatch\u0026#34;, \u0026#34;sqs:DeleteMessage\u0026#34;, \u0026#34;sqs:DeleteMessageBatch\u0026#34;, \u0026#34;sqs:GetQueueAttributes\u0026#34;, \u0026#34;sqs:ReceiveMessage\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:sqs:\u0026lt;\u0026lt;AWS REGION\u0026gt;\u0026gt;:\u0026lt;\u0026lt;AWS ACCOUNT ID\u0026gt;\u0026gt;:%INITIALS%-CustomerNotificationServiceQueue\u0026#34; } ] }    Make sure you provide the AWS ACCOUNT ID in the form of XXXXXXXXXXXX and not XXXX-XXXX-XXXX!\n Click Review policy and enter the Name CustomerNotificationServiceRolePolicy0. Click Create policy. To validate this step, select on the role again and your should see 3 policies attached to your role, including the one you just have created:\n  Detailed description     5. Add the Amazon SQS queue as event source for your Customer Notification Service AWS Lambda function Open your AWS Lambda console and select Functions in the left navigation. Click on the function with the name %INITIALS%-wild-rydes-async-msg-2-CustomerNotification... (assuming your have chosen %INITIALS%-wild-rydes-async-msg-2 as your stack name). Click on the + Add Trigger button on the left side of the page:\n  Detailed description     On the following page, select SQS as the event source for this AWS Lambda function. For the SQS queue, select the %INITIALS%-CustomerNotificationServiceQueue and set the batch size to 1. Don\u0026rsquo;t forget to enable the trigger, before you click the Add button in the lower right corner.\n  Detailed description     After some seconds, the trigger will be enabled and and you are ready to go (you may have to refresh the site a few times).\n  Detailed description     "},{"uri":"https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-extraordinary-rides-service-subscription/create-extraordinary-rides-service-subscription-console.html","title":"Console","tags":[],"description":"","content":"1. Create a new Amazon SQS queue In your Amazon SQS console, select Create New Queue in top left corner or click Get Started Now in the center of the page, if it\u0026rsquo;s your first queue in this region.\n  Detailed description     Enter %INITIALS%-ExtraordinaryRidesServiceQueue as Queue Name, make sure Standard Queue is highlighted and the queue name is prefixed with your initials. Click Create Queue.\n  Detailed description     2. Create a new subscription After creating %INITIALS%-ExtraordinaryRidesServiceQueue, click the Subscribe to Amazon SNS topic button.\n  Detailed description     From the drop down, select the %INITIALS%-RideCompletionTopic ARN and click Save.\n  Detailed description     3. Validate the subscription confirmation Browse to your Amazon SNS console to list your existing topics. Select the %INITIALS%-RideCompletionTopic and verify, the subscription has the status Confirmed.\n  Detailed description     4. Add the filter to the subscription Click on the subscription id for the %INITIALS%-ExtraordinaryRidesServiceQueue subscription and click on Edit to add our subscription filter policy. In the subscription filter policy section, add out filter policy. Click Save changes.\n  cheat sheet   { \u0026quot;fare\u0026quot;: [{\u0026quot;numeric\u0026quot;: [\u0026quot;\u0026gt;=\u0026quot;, 50]}], \u0026quot;distance\u0026quot;: [{\u0026quot;numeric\u0026quot;: [\u0026quot;\u0026gt;=\u0026quot;, 20]}] }      Detailed description     5. Grant permissions to our function to access the Amazon SQS queue In your Amazon IAM console, select Roles in the left navigation. Use the filter text box to find the role with the name %INITIALS%-wild-rydes-async-msg-2-ExtraordinaryRidesService-... (assuming your have chosen %INITIALS%-wild-rydes-async-msg-2 as your stack name).\n  Detailed description     Click on the role name and click Add inline policy to attache another one.\n  Detailed description     Select the JSON tab and passed the following policy statement into it, after you have substitute \u0026laquo;\u0026hellip;\u0026raquo; and %INITIALS% with the correct values. It will add the permission to your Lambda function to access the Amazon SQS queue:\n  policy   { \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;sqs:ChangeMessageVisibility\u0026#34;, \u0026#34;sqs:ChangeMessageVisibilityBatch\u0026#34;, \u0026#34;sqs:DeleteMessage\u0026#34;, \u0026#34;sqs:DeleteMessageBatch\u0026#34;, \u0026#34;sqs:GetQueueAttributes\u0026#34;, \u0026#34;sqs:ReceiveMessage\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:sqs:\u0026lt;\u0026lt;AWS REGION\u0026gt;\u0026gt;:\u0026lt;\u0026lt;AWS ACCOUNT ID\u0026gt;\u0026gt;:%INITIALS%-ExtraordinaryRidesServiceQueue\u0026#34; } ] }    Make sure you provide the AWS ACCOUNT ID in the form of XXXXXXXXXXXX and not XXXX-XXXX-XXXX!\n Click Review policy and enter the Name ExtraordinaryRidesServiceRolePolicy0. Click Create policy. To validate this step, select on the role again and your should see 3 policies attached to your role, including the one you just have created:\n  Detailed description     6. Add the Amazon SQS queue as event source for your Customer Notification Service AWS Lambda function Open your AWS Lambda console and select Functions in the left navigation. Click on the function with the name %INITIALS%-wild-rydes-async-msg-2-ExtraordinaryRides... (assuming your have chosen %INITIALS%-wild-rydes-async-msg-2 as your stack name). Click on the + Add Trigger button on the left side of the page:\n  Detailed description     On the following page, select SQS as the event source for this AWS Lambda function. For the SQS queue, select the %INITIALS%-ExtraordinaryRidesServiceQueue and set the batch size to 1. Don\u0026rsquo;t forget to enable the trigger, before you click the Add button in the lower right corner.\n  Detailed description     After some seconds, the trigger will be enabled and and you are ready to go (you may have to refresh the site a few times).\n  Detailed description     "},{"uri":"https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-sns-topic/create-sns-topic-console.html","title":"Console","tags":[],"description":"","content":"1. Browse to the Amazon SNS console In your Amazon SNS console, select Topic in the left navigation pane and click the Create topic button in the top right corner.\n  Detailed description     2. Create the Ride Completion Topic Choose Standard topic type. Enter the topic name %INITIALS%-RideCompletionTopic and leave the default values. Remember to prefix the name with your initials. Scroll to the bottom of the page and click Create topic.\n  Detailed description   In the picture below SNS topic name prefix is for sample user Jan Nowak with jn as initials.   "},{"uri":"https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/update-unicorn-management-service/update-unicorn-management-service-console.html","title":"Console","tags":[],"description":"","content":"1. Grant additional IAM permissions to Lambda In your Amazon IAM console, select Roles in the left navigation. Use the filter text box to find the role with the name %INITIALS%-wild-rydes-async-msg-2-SubmitRideCompletionFunctio-... (assuming your have chosen ``%INITIALS%-wild-rydes-async-msg-2` as your stack name).\n  Detailed description     Click on the role name and click Add inline policy to attache another one.\n  Detailed description     Select the JSON tab and passed the following policy statement into it, after you have substitute \u0026laquo;\u0026hellip;\u0026raquo; with the correct values. It will add the permission to your Lambda function to publish messages to this particular Amazon SNS topic:\n  policy   { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Action\u0026#34;: [ \u0026#34;sns:Publish\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:sns:\u0026lt;\u0026lt;AWS REGION\u0026gt;\u0026gt;:\u0026lt;\u0026lt;AWS ACCOUNT ID\u0026gt;\u0026gt;:\u0026lt;\u0026lt;SNS TOPIC NAME\u0026gt;\u0026gt;\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34; } ] }    Make sure you provide the AWS ACCOUNT ID in the form of XXXXXXXXXXXX and not XXXX-XXXX-XXXX!\n Click Review policy and enter the Name SubmitRideCompletionFunctionRolePolicy1. Click Create policy. To validate this step, select on the role again and your should see 3 policies attached to your role, including the one you just have created:\n  Detailed description     2. Provide the Amazon SNS topic ARN to Lambda In your AWS Lambda console, select Functions in the left navigation. Use the filter text box to find the function with the name %INITIALS%-wild-rydes-async-msg-2-SubmitRideCompletionFunctio-... (assuming your have chosen %INITIALS%-wild-rydes-async-msg-2 as your stack name).\n  Detailed description     Click on the function name and scroll down to the section Environment variables. Our Lambda function expects an environment variable with the Name TOPIC_ARN. It uses this Amazon SNS topic to publish all messages to. Lookup your Amazon SNS topic name in the Amazon SNS console and add this variable. Click the Save button in the top right corner to save the change.\n  Detailed description     3. Update your Lambda function to call Amazon SNS Open your AWS Lambda console and select Functions in the left navigation. Select the function with the name %INITIALS%-wild-rydes-async-msg-2-SubmitRideCompletionFunctio-... (assuming your have chosen %INITIALS%-wild-rydes-async-msg-2 as your stack name). Scroll a bit down to the section Function code. Add the definition of the sns client directly after the dynamodb client:\n  Cheat Sheet   sns = boto3.client(\u0026#39;sns\u0026#39;, config=config)    After the put item DynamoDB statement and before we are sending the response back to the caller, add the code to publish a message to Amazon SNS:\n  Cheat Sheet   response = sns.publish( TopicArn=TOPIC_ARN, Message=json.dumps(request), MessageAttributes = { \u0026#39;fare\u0026#39;: { \u0026#39;DataType\u0026#39;: \u0026#39;Number\u0026#39;, \u0026#39;StringValue\u0026#39;: str(request[\u0026#39;fare\u0026#39;]) }, \u0026#39;distance\u0026#39;: { \u0026#39;DataType\u0026#39;: \u0026#39;Number\u0026#39;, \u0026#39;StringValue\u0026#39;: str(request[\u0026#39;distance\u0026#39;]) } } )      Detailed description     "},{"uri":"https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/clean-up/clean-up-sam.html","title":"SAM","tags":[],"description":"","content":"3. Delete the Amazon S3 bucket In your Cloud9 IDE, run the following command to delete the Amazon S3 bucket we created earlier:\naws s3 rb s3://${BUCKET_NAME} —-force You are done!\n"},{"uri":"https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-customer-accounting-service-subscription/create-customer-accounting-service-subscription-sam.html","title":"SAM","tags":[],"description":"","content":"1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-2/template.yaml. In the Resources section, add the definition for an Amazon SQS queue with the name CustomerAccountingServiceQueue, the CustomerAccountingService will use to consume messages from. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerAccountingServiceQueue: Type: AWS::SQS::Queue    The next step, before we can define the subscription, is granting our Amazon SNS topic the permissions to publish messages into this Amazon SQS queue. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerAccountingServiceQueuePolicy: Type: AWS::SQS::QueuePolicy Properties: Queues: - !Ref CustomerAccountingServiceQueue PolicyDocument: Statement: Effect: Allow Principal: \u0026#39;*\u0026#39; Action: sqs:SendMessage Resource: \u0026#39;*\u0026#39; Condition: ArnEquals: aws:SourceArn: !Ref RideCompletionTopic    Now we are ready to create the Amazon SNS subscription for the CustomerAccountingService. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerAccountingServiceQueueToRidesTopicSubscription: Type: AWS::SNS::Subscription Properties: Endpoint: !GetAtt CustomerAccountingServiceQueue.Arn Protocol: sqs RawMessageDelivery: true TopicArn: !Ref RideCompletionTopic    The next step is to attache an AWS IAM policy tou our CustomerAccountingService AWS Lambda function, which grants permission to access our previously created Amazon SQS queue, to consume the messages. You can find the AWS SAM documentation to do so here and here.\n  Cheat Sheet   Policies: - SQSPollerPolicy: QueueName: !Ref CustomerAccountingServiceQueue    Last but not least, we have to declare the CustomerAccountingServiceQueue as event source for our CustomerAccountingService. You can find the AWS SAM documentation to do so here.\n  Cheat Sheet   Events: CustomerAccountingServiceJobQueue: Type: SQS Properties: Queue: !GetAtt CustomerAccountingServiceQueue.Arn BatchSize: 1      Detailed description     2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SQS queue and the Amazon SNS subscription:\ncd ~/environment/wild-rydes-async-messaging/lab-2 sam build sam deploy \\  --guided \\  --stack-name %INITIALS-wild-rydes-async-msg-2 \\  --capabilities CAPABILITY_IAM In the meantime while your waiting, you may want to have a look at the AWS SAM template to make yourself familiar with the stack we launched. Just click on the template.yaml attachment below to see the content.\nBecause AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SQS queue and the Amazon SNS subscription.\n"},{"uri":"https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-customer-notification-service-subscription/create-customer-notification-service-subscription-sam.html","title":"SAM","tags":[],"description":"","content":"1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file \u0026lsquo;wild-rydes-async-messaging/lab-2/template.yaml\u0026rsquo;. In the Resources section, add the definition for an Amazon SQS queue with the name CustomerNotificationServiceQueue, the CustomerNotificationService will use to consume messages from. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerNotificationServiceQueue: Type: AWS::SQS::Queue    The next step, before we can define the subscription, is granting our Amazon SNS topic the permissions to publish messages into this Amazon SQS queue. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerNotificationServiceQueuePolicy: Type: AWS::SQS::QueuePolicy Properties: Queues: - !Ref CustomerNotificationServiceQueue PolicyDocument: Statement: Effect: Allow Principal: \u0026#39;*\u0026#39; Action: sqs:SendMessage Resource: \u0026#39;*\u0026#39; Condition: ArnEquals: aws:SourceArn: !Ref RideCompletionTopic    Now we are ready to create the Amazon SNS subscription for the CustomerNotificationService. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   CustomerNotificationServiceQueueToRidesTopicSubscription: Type: AWS::SNS::Subscription Properties: Endpoint: !GetAtt CustomerNotificationServiceQueue.Arn Protocol: sqs RawMessageDelivery: true TopicArn: !Ref RideCompletionTopic    The next step is to attache an AWS IAM policy tou our CustomerNotificationService AWS Lambda function, which grants permission to access our previously created Amazon SQS queue, to consume the messages. You can find the AWS SAM documentation to do so here and here.\n  Cheat Sheet   Policies: - SQSPollerPolicy: QueueName: !Ref CustomerNotificationServiceQueue    Last but not least, we have to declare the CustomerNotificationServiceQueue as event source for our CustomerNotificationService. You can find the AWS SAM documentation to do so here.\n  Cheat Sheet   Events: CustomerNotificationServiceJobQueue: Type: SQS Properties: Queue: !GetAtt CustomerNotificationServiceQueue.Arn BatchSize: 1      Detailed description     2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SQS queue and the Amazon SNS subscription:\ncd ~/environment/wild-rydes-async-messaging/lab-2 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name %INITIALS-wild-rydes-async-msg-2 \\  --capabilities CAPABILITY_IAM In the meantime while your waiting, you may want to have a look at the AWS SAM template to make yourself familiar with the stack we launched. Just click on the template.yaml attachment below to see the content.\nBecause AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SQS queue and the Amazon SNS subscription.\n"},{"uri":"https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-extraordinary-rides-service-subscription/create-extraordinary-rides-service-subscription-sam.html","title":"SAM","tags":[],"description":"","content":"1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-2/template.yaml. In the Resources section, add the definition for an Amazon SQS queue with the name ExtraordinaryRidesServiceQueue, the ExtraordinaryRidesService will use to consume messages from. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   ExtraordinaryRidesServiceQueue: Type: AWS::SQS::Queue    The next step, before we can define the subscription, is granting our Amazon SNS topic the permissions to publish messages into this Amazon SQS queue. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   ExtraordinaryRidesServiceQueuePolicy: Type: AWS::SQS::QueuePolicy Properties: Queues: - !Ref ExtraordinaryRidesServiceQueue PolicyDocument: Statement: Effect: Allow Principal: \u0026#39;*\u0026#39; Action: sqs:SendMessage Resource: \u0026#39;*\u0026#39; Condition: ArnEquals: aws:SourceArn: !Ref RideCompletionTopic    Now we are ready to create the Amazon SNS subscription for the ExtraordinaryRidesService. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet   ExtraordinaryRidesServiceQueueToRidesTopicSubscription: Type: AWS::SNS::Subscription Properties: Endpoint: !GetAtt ExtraordinaryRidesServiceQueue.Arn Protocol: sqs RawMessageDelivery: true TopicArn: !Ref RideCompletionTopic FilterPolicy: { \u0026#34;fare\u0026#34;: [{\u0026#34;numeric\u0026#34;: [\u0026#34;\u0026gt;=\u0026#34;, 50]}], \u0026#34;distance\u0026#34;: [{\u0026#34;numeric\u0026#34;: [\u0026#34;\u0026gt;=\u0026#34;, 20]}] }    The next step is to attache an AWS IAM policy tou our ExtraordinaryRidesService AWS Lambda function, which grants permission to access our previously created Amazon SQS queue, to consume the messages. You can find the AWS SAM documentation to do so here and here.\n  Cheat Sheet   Policies: - SQSPollerPolicy: QueueName: !Ref ExtraordinaryRidesServiceQueue    Last but not least, we have to declare the ExtraordinaryRidesServiceQueue as event source for our ExtraordinaryRidesService. You can find the AWS SAM documentation to do so here.\n  Cheat Sheet   Events: ExtraordinaryRidesServiceJobQueue: Type: SQS Properties: Queue: !GetAtt ExtraordinaryRidesServiceQueue.Arn BatchSize: 1      Detailed description     2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SQS queue and the Amazon SNS subscription:\ncd ~/environment/wild-rydes-async-messaging/lab-2 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name %INITIALS-wild-rydes-async-msg-2 \\  --capabilities CAPABILITY_IAM In the meantime while your waiting, you may want to have a look at the AWS SAM template to make yourself familiar with the stack we launched. Just click on the template.yaml attachment below to see the content.\nBecause AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SQS queue and the Amazon SNS subscription.\n"},{"uri":"https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/create-sns-topic/create-sns-topic-sam.html","title":"SAM","tags":[],"description":"","content":"1. Update the AWS SAM template In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-2/template.yaml. In the Resources section, add the definition for an Amazon SNS topic with the name %INITIALS%-RideCompletionTopic. Remember to prefix the topic name with your initials. You can find the AWS CloudFormation documentation to do so here.\n  Cheat Sheet    RideCompletionTopic: Type: AWS::SNS::Topic      Detailed description   In the picture below, SNS topic name prefix is for sample user Jan Nowak with jn as initials.   2. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the Amazon SNS topic:\ncd ~/environment/wild-rydes-async-messaging/lab-2 sam build Now we are ready to update the application, by running the following command to deploy the change. Remember about your initials prefix in CloudFormation stack name:\nsam deploy \\  --guided \\  --stack-name %INITIALS%-wild-rydes-async-msg-2 \\  --capabilities CAPABILITY_IAM  In the meantime while your waiting, you may want to have a look at the AWS SAM template to make yourself familiar with the stack we launched. Just click on the template.yaml attachment below to see the content.\nBecause AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new Amazon SNS topic.\n"},{"uri":"https://marcinbelczewski.github.io/asynchronous-messaging-workshop/topic-queue-chaining-and-load-balancer/update-unicorn-management-service/update-unicorn-management-service-sam.html","title":"SAM","tags":[],"description":"","content":"1. Grant additional IAM permissions to Lambda In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-2/template.yaml. In the Resources section, look for the SubmitRideCompletionFunction definition. It already contains one policies entry called DynamoDBCrudPolicy. Directly below, add a policy entry which grants Amazon SNS publish message permission. You can look up the supported policies here.\n  Cheat Sheet   - SNSPublishMessagePolicy: TopicName: !GetAtt RideCompletionTopic.TopicName      Detailed description     2. Provide the Amazon SNS topic ARN to Lambda In your Cloud9 IDE for this workshop, open the SAM template file wild-rydes-async-messaging/lab-2/template.yaml. In the Resources section, look for the SubmitRideCompletionFunction definition. It already contains one environment variables entry called TABLE_NAME. Directly below, add an additional variable with the key TOPIC_ARN and the corresponding value.\n  Cheat Sheet   TOPIC_ARN: !Ref RideCompletionTopic      Detailed description     3. Update your Lambda function to call Amazon SNS In your Cloud9 IDE, open the Python based AWS Lambda function wild-rydes-async-messaging/lab-2/unicorn-management-service/app.py.\nAdd the definition of the sns client directly after the dynamodb client:\n  Cheat Sheet   sns = boto3.client(\u0026#39;sns\u0026#39;, config=config)    After the put item DynamoDB statement and before we are sending the response back to the caller, add the code to publish a message to Amazon SNS:\n  Cheat Sheet   response = sns.publish( TopicArn=TOPIC_ARN, Message=json.dumps(request), MessageAttributes = { \u0026#39;fare\u0026#39;: { \u0026#39;DataType\u0026#39;: \u0026#39;Number\u0026#39;, \u0026#39;StringValue\u0026#39;: str(request[\u0026#39;fare\u0026#39;]) }, \u0026#39;distance\u0026#39;: { \u0026#39;DataType\u0026#39;: \u0026#39;Number\u0026#39;, \u0026#39;StringValue\u0026#39;: str(request[\u0026#39;distance\u0026#39;]) } } )      Detailed description     4. Deploy the updated AWS SAM template Run the following command to build the lab again, after we have added the additional policy:\ncd ~/environment/wild-rydes-async-messaging/lab-2 sam build Now we are ready to update the application, by running the following command to deploy the change:\nsam deploy \\  --guided \\  --stack-name %INITIALS-wild-rydes-async-msg-2 \\  --capabilities CAPABILITY_IAM In the meantime while your waiting, you may want to have a look at the AWS SAM template to make yourself familiar with the stack we launched. Just click on the template.yaml attachment below to see the content.\nBecause AWS SAM will only deploy/update/delete resources which are changed, it only takes a couple of seconds to deploy the new version.\n"},{"uri":"https://marcinbelczewski.github.io/asynchronous-messaging-workshop/tags.html","title":"Tags","tags":[],"description":"","content":""}]